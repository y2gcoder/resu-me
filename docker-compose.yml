services:
  postgres:
    image: postgres:16-alpine
    container_name: resume-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-resume}
      POSTGRES_USER: ${POSTGRES_USER:-resume}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-resume}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  storage:
    image: minio/minio:RELEASE.2024-07-26T20-48-21Z
    container_name: resume-storage
    restart: unless-stopped
    command: server /data --console-address :9001
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-local-access-key}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-local-secret-key}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - storage_data:/data
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --quiet http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5

  storage-init:
    image: minio/mc:RELEASE.2024-07-26T20-48-21Z
    container_name: resume-storage-init
    depends_on:
      storage:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-local-access-key}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-local-secret-key}
      MINIO_BUCKET: ${MINIO_BUCKET:-resume-exports}
    entrypoint: /bin/sh
    command:
      - -c
      - |
        set -eu
        mc alias set local http://storage:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD}
        mc mb -p local/$${MINIO_BUCKET} || true
    restart: "no"

  backend:
    image: ghcr.io/astral-sh/uv:0.4.20
    container_name: resume-backend
    depends_on:
      postgres:
        condition: service_healthy
      storage:
        condition: service_healthy
    working_dir: /workspace/backend
    env_file:
      - backend/.env
    environment:
      RESUME_DATABASE_URL: ${RESUME_DATABASE_URL:-postgresql+asyncpg://resume:resume@postgres:5432/resume}
    volumes:
      - ./backend:/workspace/backend
      - backend_uv_cache:/workspace/.uv
    command: >-
      sh -c "cd /workspace/backend &&
      if [ -f pyproject.toml ]; then
        uv sync &&
        uv run uvicorn app.main:app --reload --host 0.0.0.0 --port 8000;
      else
        echo 'pyproject.toml not found, keeping container idle.' &&
        tail -f /dev/null;
      fi"
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    restart: unless-stopped

  frontend:
    image: node:20-bullseye
    container_name: resume-frontend
    depends_on:
      backend:
        condition: service_started
    working_dir: /workspace/frontend
    env_file:
      - frontend/.env.local
    environment:
      PORT: ${FRONTEND_PORT:-3000}
      NEXT_TELEMETRY_DISABLED: "1"
    volumes:
      - ./frontend:/workspace/frontend
      - frontend_node_modules:/workspace/frontend/node_modules
      - frontend_pnpm_store:/root/.local/share/pnpm/store
    command: >-
      sh -c "cd /workspace/frontend &&
      corepack enable &&
      if [ -f package.json ]; then
        pnpm install &&
        pnpm dev -- --hostname 0.0.0.0 --port ${FRONTEND_PORT:-3000};
      else
        echo 'package.json not found, keeping container idle.' &&
        tail -f /dev/null;
      fi"
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    restart: unless-stopped

volumes:
  postgres_data:
  storage_data:
  backend_uv_cache:
  frontend_node_modules:
  frontend_pnpm_store:
